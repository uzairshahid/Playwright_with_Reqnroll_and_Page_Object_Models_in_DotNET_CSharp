// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Playwrights_Web_Automation.Feature
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Add Employee Functionality")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [NUnit.Framework.CategoryAttribute("AddEmployeeFeature")]
    public partial class AddEmployeeFunctionalityFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "AddEmployeeFeature"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature", "Add Employee Functionality", "  As an Admin, I want to add an employee so that I can manage employee details in" +
                " the system.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "AddEmployeeTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 5
#line hidden
#line 6
  await testRunner.GivenAsync("Go to Admin Login Page with URL \"/auth/login\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
  await testRunner.WhenAsync("Enter Correct UserName \"Admin\" and Password \"admin123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 8
  await testRunner.ThenAsync("Click on the Login Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("To Verify, Admin should be able to Create Employee by login and then go to create" +
            " Employee Page")]
        [NUnit.Framework.TestCaseAttribute("Uz", "Ai", "R", "122323", "12345", "15", "December", "2022", "Qatari", "Married", "5", "August", "1991", "Male", null)]
        public async System.Threading.Tasks.Task ToVerifyAdminShouldBeAbleToCreateEmployeeByLoginAndThenGoToCreateEmployeePage(string firstName, string middleName, string lastName, string employeeId, string driverLicenseNumber, string driverLicenseExpiryDay, string driverLicenseExpiryMonth, string driverLicenseExpiryYear, string nationality, string maritalStatus, string dateOfBirthDay, string dateOfBirthMonth, string dateOfBirthYear, string gender, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("MiddleName", middleName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("EmployeeId", employeeId);
            argumentsOfScenario.Add("DriverLicenseNumber", driverLicenseNumber);
            argumentsOfScenario.Add("DriverLicenseExpiryDay", driverLicenseExpiryDay);
            argumentsOfScenario.Add("DriverLicenseExpiryMonth", driverLicenseExpiryMonth);
            argumentsOfScenario.Add("DriverLicenseExpiryYear", driverLicenseExpiryYear);
            argumentsOfScenario.Add("Nationality", nationality);
            argumentsOfScenario.Add("MaritalStatus", maritalStatus);
            argumentsOfScenario.Add("DateOfBirthDay", dateOfBirthDay);
            argumentsOfScenario.Add("DateOfBirthMonth", dateOfBirthMonth);
            argumentsOfScenario.Add("DateOfBirthYear", dateOfBirthYear);
            argumentsOfScenario.Add("Gender", gender);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("To Verify, Admin should be able to Create Employee by login and then go to create" +
                    " Employee Page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 11
  await testRunner.GivenAsync("Then go to PIM Page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 12
  await testRunner.WhenAsync("Click on Add Employee Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 13
  await testRunner.AndAsync(string.Format("Enter Correct First Name \"{0}\", Middle Name \"{1}\", Last Name \"{2}\", Employee ID \"" +
                            "{3}\"", firstName, middleName, lastName, employeeId), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
  await testRunner.AndAsync("Click on the Save Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
  await testRunner.ThenAsync("Click on the Personal Details Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 16
  await testRunner.AndAsync(string.Format("Enter Driver\'s License Number \"{0}\", License Expiry Date \"{1}\" \"{2}\" \"{3}\", Natio" +
                            "nality \"{4}\", Marital Status \"{5}\", Date of Birth \"{6}\" \"{7}\" \"{8}\", Gender \"{9}" +
                            "\"", driverLicenseNumber, driverLicenseExpiryDay, driverLicenseExpiryMonth, driverLicenseExpiryYear, nationality, maritalStatus, dateOfBirthDay, dateOfBirthMonth, dateOfBirthYear, gender), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
  await testRunner.ThenAsync("Click on the Save Button Add Details", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
